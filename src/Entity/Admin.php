<?php

namespace App\Entity;

use App\Repository\AdminRepository;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

#[ORM\Entity(repositoryClass: AdminRepository::class)]
class Admin implements UserInterface, PasswordAuthenticatedUserInterface
{
    // Primary key ID, auto-generated by the database
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    // Admin's email, must be unique
    #[ORM\Column(length: 180, unique: true)]
    private ?string $email = null;

    // Roles assigned to the admin
    #[ORM\Column]
    private array $roles = [];

    /**
     * @var string The hashed password
     */
    // Hashed password of the admin
    #[ORM\Column]
    private ?string $password = null;

    // Getters and setters for id and email properties
    // Get the ID of the admin
    public function getId(): ?int
    {
        return $this->id;
    }

    // Get the email of the admin
    public function getEmail(): ?string
    {
        return $this->email;
    }

    // Set the email of the admin
    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    /**
     * A visual identifier that represents this user.
     *
     * @see UserInterface
     */
    // Get a visual identifier for the admin (in this case, the email)
    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    /**
     * @see UserInterface
     */
    // Get the roles assigned to the admin
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    // Set the roles for the admin
    public function setRoles(array $roles): static
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * @see PasswordAuthenticatedUserInterface
     */
    // Get the hashed password of the admin
    public function getPassword(): string
    {
        return $this->password;
    }

    // Set the hashed password of the admin
    public function setPassword(string $password): static
    {
        $this->password = $password;

        return $this;
    }

    /**
     * @see UserInterface
     */
    // Clear any sensitive data after authentication
    public function eraseCredentials(): void
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }
}